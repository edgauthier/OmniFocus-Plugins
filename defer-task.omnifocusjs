/*{
	"author": "Ed Gauthier",
	"targets": ["omnifocus"],
	"type": "action",
	"identifier": "net.egauthier.omnifocus.of.defer-task",
	"version": "1.0",
	"description": "Defers a task. If the task follows a fixed repeating schedule, creates a standalone duplicate task to preserve original repeat schedule.",
	"label": "Defer task preserving fixed repeat schedules",
	"shortLabel": "Defer Task",
	"image":"goforward.plus"
}*/
(() => {

  const action = new PlugIn.Action(function(selection, sender) {

    //Get a new date to change the task to after duplication
    let today = new Date()
    today.setHours(0)
    today.setMinutes(0)
    today.setSeconds(0)
    today.setMilliseconds(0)
    var tomorrow = new Date(today)
    tomorrow.setDate(tomorrow.getDate()+1)
    let selectedTasksHaveDue = selection.tasks.filter(t => t.dueDate != null).length > 0

    let dateInputField = new Form.Field.Date(
      "dateInput",
      "Defer date",
      null
    )

    let editAfterField = new Form.Field.Checkbox(
      "editAfter",
      "Edit task after deferring",
      null
      )
    
    let clearDueField = new Form.Field.Checkbox(
      "clearDue",
      "Clear due date",
      null
    )

    let inputForm = new Form()
    inputForm.addField(dateInputField)
    inputForm.addField(editAfterField)
    if (selectedTasksHaveDue){
      inputForm.addField(clearDueField)
    }
    let formPrompt = selection.tasks.length > 1 ? "Defer tasks:" : "Defer task:"
    let buttonTitle = "Defer"
    var formPromise = inputForm.show(formPrompt, buttonTitle)

    inputForm.validate = function(formObject){
      let dateInput = formObject.values["dateInput"]
      return ((dateInput && dateInput >= today) ? true:false)
    }

    formPromise.then(function(formObject){
      let dateInput = formObject.values["dateInput"]
      let editAfter = formObject.values["editAfter"]
      let clearDue = formObject.values["clearDue"]
      console.log(dateInput)

      let duplicatedTasks = new Array()
      selection.tasks.forEach(function(task){
        taskToUpdate = task
        // confirm task is a repeating task
        if(task.repetitionRule != null && task.repetitionRule.method == Task.RepetitionMethod.Fixed){
          //Duplicate task
          let insertionLocation = task.after
          let dupTasks = duplicateTasks([task], insertionLocation)
          let dupTask = dupTasks[0]

          // take repeat off the duplicate task 
          dupTask.repetitionRule = null

          // current task marked complete to generate the future task. 
          task.markComplete();							

          //Then we need to delete the one that was never actually completed.
          //Delete last completed (this could probably be done more efficiently)
          let last_task = flattenedTasks.reduce((a,b) => a.completionDate > b.completionDate ? a : b) 
          if (last_task){deleteObject(last_task)}
          duplicatedTasks.push(dupTask.id.primaryKey)

          // change the task to update to be the duplicate task
          taskToUpdate = dupTask
        }

        // defer the task we're updating
        taskToUpdate.deferDate = dateInput

        // Clear due date on task if desired
        if (clearDue){
          taskToUpdate.dueDate = null
        }
      })
      
      if(editAfter && duplicatedTasks.length > 0){
        let idStr = duplicatedTasks.join(",")
        URL.fromString("omnifocus:///task/" + idStr).open()
      }
    })

    formPromise.catch(function(error){
      console.log("form cancelled", error.message)
    })

  });

  action.validate = function(selection, sender){
    // validation code
    // selection options: tasks, projects, folders, tags
    return (selection.tasks.length > 0)
  };

  return action;
})();
